


You said:

So I want it it type is facebook it will able to clickable in table and that will login to facebook of that user using cookies and it will store data correctly and show data correctly give me whole code /** * * I have one table user table * with columns: id (pk), name, email, password,cookies and type * type can be mannual or facebook. * * * */ const { app, BrowserWindow, ipcMain, dialog } = require('electron'); const puppeteer = require('puppeteer-core'); const db = require('./database'); const path = require('path'); let mainWindow; // Function to get Chrome path based on platform function getChromePath() { switch (process.platform) { case 'win32': return 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'; case 'darwin': return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'; case 'linux': return '/usr/bin/google-chrome'; default: throw new Error('Unsupported platform'); } } app.whenReady().then(() => { mainWindow = new BrowserWindow({ width: 800, height: 600, webPreferences: { nodeIntegration: true, contextIsolation: false } }); mainWindow.loadFile(path.join(__dirname, '../renderer/index.html')); }); // Handle Facebook Login with Cookie Management ipcMain.handle("login-facebook", async (event, { email, password }) => { let browser; try { // Launch Puppeteer setup remains the same... browser = await puppeteer.launch({ executablePath: process.env.CHROME_EXECUTABLE_PATH || getChromePath(), headless: false, args: ['--no-sandbox', '--disable-setuid-sandbox'], }); const page = await browser.newPage(); await page.setDefaultNavigationTimeout(0); await page.setDefaultTimeout(0); // Login flow remains the same... await page.goto('
https://www.facebook.com/', { waitUntil: 'networkidle0' }); await page.waitForSelector('#email', { visible: true }); await page.type('#email', email); await page.waitForSelector('#pass', { visible: true }); await page.type('#pass', password); await Promise.all([ page.click('button[name="login"]'), page.waitForNavigation({ waitUntil: 'domcontentloaded' }) ]); // CAPTCHA and 2FA handling remains the same... const recaptchaSelector = 'iframe[title*="reCAPTCHA"]'; if (await page.$(recaptchaSelector)) { console.log('CAPTCHA detected! Waiting for user to solve it...'); await dialog.showMessageBox({ type: 'info', buttons: ['OK'], title: 'Solve CAPTCHA', message: 'A CAPTCHA has been detected. Please solve it manually in the opened browser window.', }); await page.waitForFunction(() => { return !document.querySelector('iframe[title*="reCAPTCHA"]'); }, { timeout: 0 }); } const twoFactorSelector = 'input[name="approvals_code"]'; if (await page.$(twoFactorSelector)) { console.log('2FA detected! Waiting for user input...'); await dialog.showMessageBox({ type: 'info', buttons: ['OK'], title: 'Two-Factor Authentication', message: 'Facebook requires 2FA. Please enter the code manually in the opened browser window.', }); await page.waitForFunction(() => { return document.body.innerText.includes('News Feed') || document.body.innerText.includes('Home'); }, { timeout: 0 }); } await page.waitForFunction(() => { return document.body.innerText.includes('Home') || document.body.innerText.includes('News Feed'); }, { timeout: 0 }); // Extract User Info const userData = await page.evaluate(() => { return { automation: true, pageTitle: document.title, currentUrl: window.location.href }; }); // Get Cookies const cookies = await page.cookies(); console.log('Cookies:', cookies); console.log('Login successful:', userData); return { success: true, data: userData,cookies:cookies }; } catch (error) { const errorMessage = error instanceof Error ? error.message : String(error); console.error('Error during Facebook scraping:', errorMessage); return { success: false, error: errorMessage }; } finally { // Uncomment if you want to close the browser after execution if (browser) await browser.close(); } }); // Login with saved cookies ipcMain.handle("login-saved-account", async (event, id) => { const browser = await puppeteer.launch({ headless: false, executablePath: getChromePath(), args: ['--no-sandbox', '--disable-setuid-sandbox'] }); try { // Get user data from database const user = await getUserById(id); if (!user || !user.cookies) { throw new Error("No saved cookies found"); } const page = await browser.newPage(); // Set saved cookies const cookies = JSON.parse(user.cookies); await page.setCookie(...cookies); // Try to access Facebook await page.goto("https://www.facebook.com"); // Check if login was successful const isLoggedIn = await page.evaluate(() => { return document.body.innerText.includes('Home') || document.body.innerText.includes('News Feed'); }); if (!isLoggedIn) { // If cookies are expired, try regular login await page.goto("https://www.facebook.com/login"); await page.type("#email", user.email); await page.type("#pass", user.password); await page.click('[name="login"]'); // Wait for login and update cookies await page.waitForFunction( () => document.body.innerText.includes('Home') || document.body.innerText.includes('News Feed'), { timeout: 30000 } ); const newCookies = await page.cookies(); await updateUserCookies(id, JSON.stringify(newCookies)); } return { success: true, message: "Logged in successfully!" }; } catch (error) { console.error('Saved account login error:', error); await browser.close(); return { success: false, message: error.message }; } }); // Database helper functions remain the same async function getUserById(id) { return new Promise((resolve, reject) => { db.get("SELECT * FROM user WHERE id = ?", [id], (err, row) => { if (err) reject(err); resolve(row); }); }); } async function updateUserCookies(id, cookies) { return new Promise((resolve, reject) => { db.run("UPDATE user SET cookies = ? WHERE id = ?", [cookies, id], function (err) { if (err) reject(err); resolve(this.changes); } ); }); } async function saveAccountToDB(name, email, password, cookies) { return new Promise((resolve, reject) => { db.run("INSERT INTO user (name, email, password, cookies) VALUES (?, ?, ?, ?)", [name, email, password, cookies], function (err) { if (err) reject(err); resolve(this.lastID); } ); }); } // --------------------------------------------------------------------- // Save Account to SQLite async function saveAccountToDB(name, email, password, cookies) { return new Promise((resolve, reject) => { db.run("INSERT INTO user (name, email, password, cookies) VALUES (?, ?, ?, ?)", [name, email, password, cookies], function (err) { if (err) reject(err); resolve(this.lastID); } ); }); } // Add a new user ipcMain.handle("add-user", async (event, user) => { return new Promise((resolve, reject) => { db.run("INSERT INTO user (name, email, password, cookies, two_fa_code) VALUES (?, ?, ?, ?, ?)", [user.name, user.email, user.password, user.cookies, user.twoFA], function (err) { if (err) reject(err); resolve(this.lastID); } ); }); }); // Get all users ipcMain.handle("get-users", async () => { return new Promise((resolve, reject) => { db.all("SELECT * FROM user", [], (err, rows) => { if (err) reject(err); resolve(rows); }); }); }); // Delete user ipcMain.handle("delete-user", async (event, id) => { return new Promise((resolve, reject) => { db.run("DELETE FROM user WHERE id = ?", [id], function (err) { if (err) reject(err); resolve(true); }); }); }); // Update user ipcMain.handle("update-user", async (event, user) => { return new Promise((resolve, reject) => { db.run("UPDATE user SET name = ?, email = ?, password = ?, cookies = ?, two_fa_code = ? WHERE id = ?", [user.name, user.email, user.password, user.cookies, user.twoFA, user.id], function (err) { if (err) reject(err); resolve(true); } ); }); }); // -------------- LOGIN WITH COOKIES ----------------- ipcMain.handle("login-with-cookies", async (event, cookies) => { let browser; try { // testing cookies working fine // cookies = [ // { // "name": "fr", // "value": "0eROQFbf8zgaqLdpv.AWVckASJT9RD_ssYhvRdQrbLsvwXKLYQ5Draig.BnvEnS..AAA.0.0.BnvEnf.AWVnZBq6meY", // "domain": ".facebook.com", // "path": "/", // "expires": 1748168927.839113, // "size": 93, // "httpOnly": true, // "secure": true, // "session": false, // "sameSite": "None", // "priority": "Medium", // "sameParty": false, // "sourceScheme": "Secure" // }, // { // "name": "xs", // "value": "4%3ALwrfjW1dGiOkMg%3A2%3A1740392925%3A-1%3A-1", // "domain": ".facebook.com", // "path": "/", // "expires": 1771928927.515259, // "size": 47, // "httpOnly": true, // "secure": true, // "session": false, // "sameSite": "None", // "priority": "Medium", // "sameParty": false, // "sourceScheme": "Secure" // }, // { // "name": "c_user", // "value": "100071093965086", // "domain": ".facebook.com", // "path": "/", // "expires": 1771928927.515067, // "size": 21, // "httpOnly": false, // "secure": true, // "session": false, // "sameSite": "None", // "priority": "Medium", // "sameParty": false, // "sourceScheme": "Secure" // }, // { // "name": "dpr", // "value": "1.0000000149011612", // "domain": ".facebook.com", // "path": "/", // "expires": 1740997727, // "size": 21, // "httpOnly": false, // "secure": true, // "session": false, // "sameSite": "None", // "priority": "Medium", // "sameParty": false, // "sourceScheme": "Secure" // }, // { // "name": "wd", // "value": "800x600", // "domain": ".facebook.com", // "path": "/", // "expires": 1740997718, // "size": 9, // "httpOnly": false, // "secure": true, // "session": false, // "sameSite": "Lax", // "priority": "Medium", // "sameParty": false, // "sourceScheme": "Secure" // }, // { // "name": "sb", // "value": "0km8Z8O1Vib0RCWt5e3iyrgd", // "domain": ".facebook.com", // "path": "/", // "expires": 1774952927.515208, // "size": 26, // "httpOnly": true, // "secure": true, // "session": false, // "sameSite": "None", // "priority": "Medium", // "sameParty": false, // "sourceScheme": "Secure" // }, // { // "name": "datr", // "value": "0km8Z90iVR9my0sOe5wiDjqm", // "domain": ".facebook.com", // "path": "/", // "expires": 1774952914.509994, // "size": 28, // "httpOnly": true, // "secure": true, // "session": false, // "sameSite": "None", // "priority": "Medium", // "sameParty": false, // "sourceScheme": "Secure" // } // ]; // Launch Puppeteer browser = await puppeteer.launch({ executablePath: process.env.CHROME_EXECUTABLE_PATH || getChromePath(), headless: false, args: ['--no-sandbox', '--disable-setuid-sandbox'], }); const page = await browser.newPage(); await page.setDefaultNavigationTimeout(0); await page.setDefaultTimeout(0); // Set cookies before navigating to Facebook await page.setCookie(...cookies); // Navigate to Facebook await page.goto('https://www.facebook.com/', { waitUntil: 'networkidle0' }); // Check if login was successful const isLoggedIn = await page.evaluate(() => { return document.body.innerText.includes('Home') || document.body.innerText.includes('News Feed'); }); if (!isLoggedIn) { console.log("Cookies might be expired. Please log in again."); return { success: false, error: "Invalid or expired cookies. Please log in again." }; } // Extract User Info const userData = await page.evaluate(() => { return { automation: true, pageTitle: document.title, currentUrl: window.location.href }; }); console.log('Login successful with cookies:', userData); return { success: true, data: userData }; } catch (error) { const errorMessage = error instanceof Error ? error.message : String(error); console.error('Error during Facebook login with cookies:', errorMessage); return { success: false, error: errorMessage }; } finally { // Uncomment if you want to close the browser after execution // if (browser) await browser.close(); } }); const { ipcRenderer } = require('electron'); // Tab switching functionality document.querySelectorAll('.tab').forEach(tab => { tab.addEventListener('click', () => { document.querySelectorAll('.tab').forEach(t => t.classList.remove('active')); document.querySelectorAll('.form-section').forEach(f => f.classList.remove('active')); tab.classList.add('active'); document.getElementById(${tab.dataset.form}Form).classList.add('active'); }); }); // Show status message function showStatus(message, isError = false) { const statusEl = document.getElementById('status-message'); statusEl.textContent = message; statusEl.className = status-message ${isError ? 'error' : 'success'}; statusEl.style.display = 'block'; setTimeout(() => { statusEl.style.display = 'none'; }, 5000); } // Handle manual account submission document.getElementById('accountForm').addEventListener('submit', async (e) => { e.preventDefault(); const user = { name: document.getElementById('name').value, email: document.getElementById('email').value, password: document.getElementById('password').value, loginType: 'manual' }; try { await ipcRenderer.invoke('add-user', user); showStatus('Account added successfully!'); e.target.reset(); loadAccounts(); } catch (error) { showStatus('Failed to add account: ' + error.message, true); } }); // Handle Facebook login submission document.getElementById('fbForm').addEventListener('submit', async (e) => { e.preventDefault(); const loginData = { email: document.getElementById('fbEmail').value, password: document.getElementById('fbPassword').value }; try { console.log('Facebook Login Started!'); const result = await ipcRenderer.invoke('login-facebook', loginData); console.log('Login Facebook data : ',result); if (result.success) { showStatus('Facebook login successful!'); e.target.reset(); loadAccounts(); } else { showStatus(result.message, true); } } catch (error) { showStatus('Login failed: ' + error.message, true); } }); // Load accounts async function loadAccounts() { try { const accounts = await ipcRenderer.invoke('get-users'); const list = document.getElementById('accountsList'); list.innerHTML = accounts.map(acc => 
 <tr> <td>${acc.name}</td> <td>${acc.email}</td> <td>${acc.cookies ? 'Facebook' : 'Manual'}</td> <td class="action-buttons"> ${acc.cookies ? <button class="login-btn" onclick="loginWithSavedAccount(${acc.id})">Login</button> : '' } <button class="edit-btn" onclick="editUser(${acc.id})">Edit</button> <button class="delete-btn" onclick="deleteUser(${acc.id})">Delete</button> </td> </tr> ).join('');
 } catch (error) { showStatus('Failed to load accounts: ' + error.message, true); } } // Login with saved account async function loginWithSavedAccount(id) { try { const result = await ipcRenderer.invoke('login-saved-account', id); if (result.success) { showStatus('Logged in successfully!'); } else { showStatus(result.message, true); } } catch (error) { showStatus('Login failed: ' + error.message, true); } } // Delete user async function deleteUser(id) { try { await ipcRenderer.invoke('delete-user', id); showStatus('Account deleted successfully!'); loadAccounts(); } catch (error) { showStatus('Failed to delete account: ' + error.message, true); } } // Edit user async function editUser(id) { try { const accounts = await ipcRenderer.invoke('get-users'); const user = accounts.find(acc => acc.id === id); if (user) { if (user.cookies) { document.querySelector('[data-form="facebook"]').click(); document.getElementById('fbEmail').value = user.email; document.getElementById('fbPassword').value = user.password; } else { document.querySelector('[data-form="manual"]').click(); document.getElementById('name').value = user.name; document.getElementById('email').value = user.email; document.getElementById('password').value = user.password; } await deleteUser(id); } } catch (error) { showStatus('Failed to edit account: ' + error.message, true); } } // Load accounts when the page loads loadAccounts(); <!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Account Manager</title> <style> body { font-family: Arial, sans-serif; max-width: 800px; margin: 30px auto; padding: 20px; background-color: #1a1a1a; color: #fff; } .container { background: #2d2d2d; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); margin-bottom: 20px; } .tabs { display: flex; margin-bottom: 20px; gap: 10px; } .tab { padding: 10px 20px; cursor: pointer; border: none; background: #404040; color: #fff; border-radius: 5px; transition: background 0.3s; } .tab:hover { background: #000; } .tab.active { background: #0066cc; color: white; } .form-section { display: none; } .form-section.active { display: block; } form { display: flex; flex-direction: column; gap: 15px; } .input-group { display: flex; flex-direction: column; gap: 5px; } label { font-weight: bold; color: #fff; } input, textarea { padding: 12px; border: 1px solid #404040; border-radius: 5px; font-size: 14px; background: #333; color: #fff; } input:focus, textarea:focus { outline: none; border-color: #0066cc; } button { padding: 12px; border: none; border-radius: 5px; background: #0066cc; color: white; cursor: pointer; font-weight: bold; transition: background 0.3s; } button:hover { background: #004c99; } table { width: 100%; border-collapse: collapse; margin-top: 20px; background: #333; border-radius: 5px; overflow: hidden; } th, td { padding: 12px; text-align: left; border-bottom: 1px solid #404040; } th { background: #404040; color: #fff; } tr:hover { background: #404040; } .action-buttons { display: flex; gap: 10px; } .edit-btn { background: #0066cc; } .edit-btn:hover { background: #004c99; } .delete-btn { background: #cc0000; } .delete-btn:hover { background: #990000; } .login-btn { background: #006600; } .login-btn:hover { background: #004d00; } .status-message { padding: 10px; margin: 10px 0; border-radius: 5px; display: none; } .success { background: #004d00; color: #fff; } .error { background: #990000; color: #fff; } </style> </head> <body> <div class="container"> <div class="tabs"> <button class="tab active" data-form="manual">Manual Entry</button> <button class="tab" data-form="facebook">Facebook Login</button> </div> <div id="status-message" class="status-message"></div> <div id="manualForm" class="form-section active"> <h2>Manual Account Entry</h2> <form id="accountForm"> <div class="input-group"> <label for="name">Nickname</label> <input type="text" id="name" required> </div> <div class="input-group"> <label for="email">Email/Username</label> <input type="email" id="email" required> </div> <div class="input-group"> <label for="password">Password</label> <input type="password" id="password" required> </div> <button type="submit">Add Account</button> </form> </div> <div id="facebookForm" class="form-section"> <h2>Facebook Account Login</h2> <form id="fbForm"> <div class="input-group"> <label for="fbEmail">Facebook Email</label> <input type="email" id="fbEmail" value="usman20911@gmail.com" required> </div> <div class="input-group"> <label for="fbPassword">Facebook Password</label> <input type="password" id="fbPassword" value="dc9xPnwVT796ss9" required> </div> <button type="submit">Login with Facebook</button> </form> </div> </div> <div class="container"> <h2>Saved Accounts</h2> <table> <thead> <tr> <th>Nickname</th> <th>Email</th> <th>Login Type</th> <th>Actions</th> </tr> </thead> <tbody id="accountsList"></tbody> </table> </div> <script src="renderer.js"></script> </body> </html>